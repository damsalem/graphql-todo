{"version":3,"sources":["App.js","index.js"],"names":["GET_TODOS","gql","TOGGLE_TODO","ADD_TODO","DELETE_TODO","App","useState","todoText","setToDoText","useQuery","data","loading","error","useMutation","toggleToDo","onCompleted","addToDo","deleteToDo","a","id","done","variables","console","log","event","preventDefault","trim","text","refetchQueries","query","window","confirm","update","cache","newToDos","readQuery","todos","filter","todo","writeQuery","className","role","aria-label","onSubmit","type","placeholder","onChange","target","value","map","onDoubleClick","handleToggleToDo","onClick","handleDeleteToDo","apolloClient","ApolloClient","InMemoryCache","uri","headers","ReactDOM","render","client","document","getElementById"],"mappings":"gOAGMA,EAAYC,cAAH,2GASTC,EAAcD,cAAH,0OAWXE,EAAWF,cAAH,gMAWRG,EAAcH,cAAH,iMA4GFI,MA3Ff,WACE,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAiCC,mBAAST,GAAlCU,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,MACvB,EAAqBC,sBAAYX,GAA1BY,EAAP,oBACA,EAAkBD,sBAAYV,EAAU,CACtCY,YAAa,kBAAMP,EAAY,OAD1BQ,EAAP,oBAGA,EAAqBH,sBAAYT,GAA1Ba,EAAP,oBAPa,4CASb,iCAAAC,EAAA,6DAAkCC,EAAlC,EAAkCA,GAAIC,EAAtC,EAAsCA,KAAtC,SACqBN,EAAW,CAAEO,UAAW,CAAEF,KAAIC,MAAOA,KAD1D,OACQV,EADR,OAEEY,QAAQC,IAAI,gBAAiBb,GAF/B,4CATa,kEAcb,WAA6Bc,GAA7B,eAAAN,EAAA,yDACEM,EAAMC,iBACDlB,EAASmB,OAFhB,iEAGqBV,EAAQ,CACzBK,UAAW,CAAEM,KAAMpB,GACnBqB,eAAgB,CAAC,CAAEC,MAAO7B,MAL9B,OAGQU,EAHR,OAOEY,QAAQC,IAAI,cAAeb,GAP7B,4CAda,kEAwBb,+BAAAQ,EAAA,yDAAkCC,EAAlC,EAAkCA,IACZW,OAAOC,QACzB,+CAFJ,gCAKuBd,EAAW,CAC5BI,UAAW,CAAEF,MACba,OAAQ,SAACC,GACP,IACMC,EADWD,EAAME,UAAU,CAAEN,MAAO7B,IAChBoC,MAAMC,QAAO,SAACC,GAAD,OAAUA,EAAKnB,KAAOA,KAC7Dc,EAAMM,WAAW,CAAEV,MAAO7B,EAAWU,KAAM,CAAE0B,MAAOF,QAV5D,OAKUxB,EALV,OAaIY,QAAQC,IAAI,gBAAiBb,GAbjC,4CAxBa,sBAyCb,OAAIC,EAAgB,mDAChBC,GACFU,QAAQC,IAAIb,GACL,oFAGP,sBAAK8B,UAAU,8DAAf,UACE,qBAAIA,UAAU,OAAd,uBAEE,sBAAMC,KAAK,MAAMC,aAAW,YAA5B,uBAKF,uBAAMF,UAAU,MAAMG,SAvDb,4CAuDT,UACE,uBACEH,UAAU,mBACVI,KAAK,OACLC,YAAY,mBACZC,SAAU,SAACtB,GAAD,OAAWhB,EAAYgB,EAAMuB,OAAOC,QAC9CA,MAAOzC,IAET,wBAAQiC,UAAU,kBAAkBI,KAAK,SAAzC,uBAKF,qBAAKJ,UAAU,+CAAf,SACE,6BACG9B,EAAK0B,MAAMa,KAAI,SAACX,GAAD,OACd,6BACE,oBAAGY,cAAe,kBAxEjB,2CAwEuBC,CAAiBb,IAAzC,UACE,sBAAME,UAAS,yBAAoBF,EAAKlB,MAAQ,UAAhD,SACGkB,EAAKX,OAER,wBACEa,UAAU,+BACVY,QAAS,kBA9EZ,2CA8EkBC,CAAiBf,IAFlC,SAIE,sBAAME,UAAU,MAAhB,wBATGF,EAAKnB,eC9EpBmC,EAAe,IAAIC,eAAa,CACpCtB,MAAO,IAAIuB,gBACXC,IAAK,mDACLC,QAAS,CACP,wBACE,sEAINC,IAASC,OACP,cAAC,iBAAD,CAAgBC,OAAQP,EAAxB,SACE,cAAC,EAAD,MAEFQ,SAASC,eAAe,W","file":"static/js/main.345260c1.chunk.js","sourcesContent":["import { useQuery, useMutation, gql } from \"@apollo/client\";\nimport { useState } from \"react\";\n\nconst GET_TODOS = gql`\n  query getToDos {\n    todos {\n      text\n      id\n      done\n    }\n  }\n`;\nconst TOGGLE_TODO = gql`\n  mutation toggleToDo($id: uuid!, $done: Boolean!) {\n    update_todos(where: { id: { _eq: $id } }, _set: { done: $done }) {\n      returning {\n        text\n        id\n        done\n      }\n    }\n  }\n`;\nconst ADD_TODO = gql`\n  mutation addToDo($text: String!) {\n    insert_todos(objects: { text: $text }) {\n      returning {\n        done\n        id\n        text\n      }\n    }\n  }\n`;\nconst DELETE_TODO = gql`\n  mutation deleteToDo($id: uuid) {\n    delete_todos(where: { id: { _eq: $id } }) {\n      returning {\n        done\n        id\n        text\n      }\n    }\n  }\n`;\n\n//list todos\n//add todos\n//toggle todos\n//delete todos\n\nfunction App() {\n  const [todoText, setToDoText] = useState(\"\");\n  const { data, loading, error } = useQuery(GET_TODOS);\n  const [toggleToDo] = useMutation(TOGGLE_TODO);\n  const [addToDo] = useMutation(ADD_TODO, {\n    onCompleted: () => setToDoText(\"\"),\n  });\n  const [deleteToDo] = useMutation(DELETE_TODO);\n\n  async function handleToggleToDo({ id, done }) {\n    const data = await toggleToDo({ variables: { id, done: !done } });\n    console.log(\"toggled todo \", data);\n  }\n\n  async function handleAddTodo(event) {\n    event.preventDefault();\n    if (!todoText.trim()) return;\n    const data = await addToDo({\n      variables: { text: todoText },\n      refetchQueries: [{ query: GET_TODOS }],\n    });\n    console.log(\"added todo \", data);\n  }\n\n  async function handleDeleteToDo({ id }) {\n    const isConfirmed = window.confirm(\n      \"Are you sure you want to delete this to do?\"\n    );\n    if (isConfirmed) {\n      const data = await deleteToDo({\n        variables: { id },\n        update: (cache) => {\n          const prevData = cache.readQuery({ query: GET_TODOS });\n          const newToDos = prevData.todos.filter((todo) => todo.id !== id);\n          cache.writeQuery({ query: GET_TODOS, data: { todos: newToDos } });\n        },\n      });\n      console.log(\"deleted todo \", data);\n    }\n  }\n\n  if (loading) return <div>Loading To Dos..</div>;\n  if (error) {\n    console.log(data);\n    return <div>Hmm... having some trouble grabbing those To Dos</div>;\n  }\n  return (\n    <div className=\"vh-100 code flex flex-column items-center bg-gray white pa3\">\n      <h1 className=\"f2-l\">\n        To Dos&nbsp;\n        <span role=\"img\" aria-label=\"Checkmark\">\n          âœ…\n        </span>\n      </h1>\n      {/* {To Do Form} */}\n      <form className=\"mb3\" onSubmit={handleAddTodo}>\n        <input\n          className=\"pa2 f4 b--dashed\"\n          type=\"text\"\n          placeholder=\"Write your to do\"\n          onChange={(event) => setToDoText(event.target.value)}\n          value={todoText}\n        />\n        <button className=\"pa2 f4 bg-green\" type=\"submit\">\n          Create\n        </button>\n      </form>\n      {/* {To Do List} */}\n      <div className=\"flex items-center justify-center flex-column\">\n        <ul>\n          {data.todos.map((todo) => (\n            <li key={todo.id}>\n              <p onDoubleClick={() => handleToggleToDo(todo)}>\n                <span className={`pointer pa1 f3 ${todo.done && \"strike\"}`}>\n                  {todo.text}\n                </span>\n                <button\n                  className=\"bg-transparent bn f4 pointer\"\n                  onClick={() => handleDeleteToDo(todo)}\n                >\n                  <span className=\"red\">&times;</span>\n                </button>\n              </p>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\n/* import {\n  ApolloClient,\n  HttpLink,\n  ApolloLink,\n  InMemoryCache,\n  gql,\n  concat,\n} from \"@apollo/client\"; \n\nconst httpLink = new HttpLink({\n  uri: \"https://learn-graphql-todo.hasura.app/v1/graphql\",\n});\n\nconst authMiddleware = new ApolloLink((operation, forward) => {\n  // add the authorization to the headers\n  operation.setContext({\n    headers: {\n      \"x-hasura-admin-secret\":\n        \"yugZrYZBI98WXdRr4B2wiK7svuPB1kKevZdl2SUPzbjqNuMOD6zVWkpYQcQxE5oP\",\n    },\n  });\n\n  return forward(operation);\n}); \n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: concat(authMiddleware, httpLink),\n}); */\n/* const client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new HttpLink({\n    uri: \"https://learn-graphql-todo.hasura.app/v1/graphql\",\n    headers: {\n      \"x-hasura-admin-secret\":\n        \"yugZrYZBI98WXdRr4B2wiK7svuPB1kKevZdl2SUPzbjqNuMOD6zVWkpYQcQxE5oP\",\n    },\n  }),\n}); */\n\nconst apolloClient = new ApolloClient({\n  cache: new InMemoryCache(),\n  uri: \"https://learn-graphql-todo.hasura.app/v1/graphql\",\n  headers: {\n    \"x-hasura-admin-secret\":\n      \"yugZrYZBI98WXdRr4B2wiK7svuPB1kKevZdl2SUPzbjqNuMOD6zVWkpYQcQxE5oP\",\n  },\n});\n\nReactDOM.render(\n  <ApolloProvider client={apolloClient}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}